// Design Tokens - Auto-generated Swift
// Do not edit this file manually
import UIKit

extension UIColor {
    static let primary50 = UIColor(hex: "#F8FEFF")
    static let primary100 = UIColor(hex: "#F0F9FF")
    static let primary200 = UIColor(hex: "#E5F5FF")
    static let primary300 = UIColor(hex: "#C3E7FF")
    static let primary400 = UIColor(hex: "#C1E4FB")
    static let primary500 = UIColor(hex: "#0F3340")
    static let primary600 = UIColor(hex: "#0F1F40")
    static let primary700 = UIColor(hex: "#0074A5")
    static let primary800 = UIColor(hex: "#556A7D")
    static let primary900 = UIColor(hex: "#475A66")
    static let gray50 = UIColor(hex: "#FFFFFF")
    static let gray100 = UIColor(hex: "#FAFAFA")
    static let gray200 = UIColor(hex: "#F3F8FC")
    static let gray300 = UIColor(hex: "#F0F6FA")
    static let gray400 = UIColor(hex: "#FAFDFF")
    static let gray500 = UIColor(hex: "#E7EDF0")
    static let gray600 = UIColor(hex: "#909BAA")
    static let gray700 = UIColor(hex: "#757575")
    static let gray800 = UIColor(hex: "#708497")
    static let gray900 = UIColor(hex: "#000000")
    static let success50 = UIColor(hex: "#E6F4EC")
    static let success100 = UIColor(hex: "#2D8659")
    static let warning50 = UIColor(hex: "#E0F5FF")
    static let warning100 = UIColor(hex: "#0074A5")
    static let error50 = UIColor(hex: "#FCF0EE")
    static let error100 = UIColor(hex: "#CA7373")
    static let error200 = UIColor(hex: "#FAEDED")
    static let error300 = UIColor(hex: "#A22F2F")
    static let info50 = UIColor(hex: "#F9ECF3")
    static let info100 = UIColor(hex: "#7C3A60")
    static let neutral50 = UIColor(hex: "#FFF1DF")
    static let neutral100 = UIColor(hex: "#AC732B")
    static let neutral200 = UIColor(hex: "#F7EFE4")
    static let neutral300 = UIColor(hex: "#7A5E3A")
    static let textPrimary = UIColor(hex: "#0F3340")
    static let textSecondary = UIColor(hex: "#757575")
    static let textTertiary = UIColor(hex: "#909BAA")
    static let textInverse = UIColor(hex: "#FFFFFF")
    static let textMuted = UIColor(hex: "#708497")
    static let backgroundPrimary = UIColor(hex: "#F8FEFF")
    static let backgroundSecondary = UIColor(hex: "#FFFFFF")
    static let backgroundTertiary = UIColor(hex: "#F3F8FC")
    static let backgroundInverse = UIColor(hex: "#0F3340")
    static let borderDefault = UIColor(hex: "#E7EDF0")
    static let borderHover = UIColor(hex: "#C1E4FB")
    static let borderFocus = UIColor(hex: "#0F3340")
    static let borderLight = UIColor(hex: "#E7EDF0")
    static let brandPrimary = UIColor(hex: "#0F3340")
    static let brandSecondary = UIColor(hex: "#0F1F40")
    static let brandTertiary = UIColor(hex: "#E5F5FF")
    static let feedbackSuccess = UIColor(hex: "#2D8659")
    static let feedbackSuccessBg = UIColor(hex: "#E6F4EC")
    static let feedbackWarning = UIColor(hex: "#0074A5")
    static let feedbackWarningBg = UIColor(hex: "#E0F5FF")
    static let feedbackError = UIColor(hex: "#CA7373")
    static let feedbackErrorBg = UIColor(hex: "#FCF0EE")
    static let feedbackInfo = UIColor(hex: "#7C3A60")
    static let feedbackInfoBg = UIColor(hex: "#F9ECF3")
    static let feedbackNeutral = UIColor(hex: "#AC732B")
    static let feedbackNeutralBg = UIColor(hex: "#FFF1DF")
}

struct Spacing {
    static let _0: CGFloat = 0
    static let _1: CGFloat = 4
    static let _2: CGFloat = 8
    static let _3: CGFloat = 12
    static let _4: CGFloat = 16
    static let _5: CGFloat = 20
    static let _6: CGFloat = 24
    static let _8: CGFloat = 32
    static let _10: CGFloat = 40
    static let _12: CGFloat = 48
    static let _16: CGFloat = 64
    static let _20: CGFloat = 80
    static let _24: CGFloat = 96
}

struct FontSize {
    static let xs: CGFloat = 12
    static let sm: CGFloat = 14
    static let base: CGFloat = 16
    static let lg: CGFloat = 18
    static let xl: CGFloat = 20
    static let _2xl: CGFloat = 24
    static let _3xl: CGFloat = 30
    static let _4xl: CGFloat = 36
    static let _5xl: CGFloat = 48
}

struct FontFamily {
}

struct BorderRadius {
    static let none: CGFloat = 0
    static let sm: CGFloat = 2
    static let base: CGFloat = 4
    static let md: CGFloat = 6
    static let lg: CGFloat = 8
    static let xl: CGFloat = 12
    static let _2xl: CGFloat = 16
    static let full: CGFloat = 9999
}

struct Shadow {
    static let sm = ShadowStyle(
        offset: CGSize(width: 0, height: 1),
        blur: 2,
        color: UIColor(hex: "#000000")
    )
    static let base = ShadowStyle(
        offset: CGSize(width: 0, height: 1),
        blur: 3,
        color: UIColor(hex: "#000000")
    )
    static let md = ShadowStyle(
        offset: CGSize(width: 0, height: 4),
        blur: 6,
        color: UIColor(hex: "#000000")
    )
    static let lg = ShadowStyle(
        offset: CGSize(width: 0, height: 10),
        blur: 15,
        color: UIColor(hex: "#000000")
    )
    static let xl = ShadowStyle(
        offset: CGSize(width: 0, height: 20),
        blur: 25,
        color: UIColor(hex: "#000000")
    )
}

struct ShadowStyle {
    let offset: CGSize
    let blur: CGFloat
    let color: UIColor
}

// UIColor hex initializer extension
extension UIColor {
    convenience init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:
            (a, r, g, b) = (1, 1, 1, 0)
        }
        self.init(
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue: Double(b) / 255,
            alpha: Double(a) / 255
        )
    }
}